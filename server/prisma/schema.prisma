// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  username           String         @unique
  email              String         @unique
  password           String
  img                String?
  country            String
  phone              String?
  desc               String?
  isSeller           Boolean        @default(false) @map("is_seller")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @default(now()) @map("updated_ at")
  gigs               Gig[]
  review             Review[]
  sellerOrders       Order[]        @relation(name: "seller")
  buyerOrders        Order[]        @relation(name: "buyer")
  sellerConversation Conversation[] @relation(name: "sellerConversation")
  buyerConversation  Conversation[] @relation(name: "buyerConversation")

  @@map("user")
}

model Gig {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @unique @map("user_id")
  title            String
  desc             String
  totalStars       Int      @default(0) @map("total_stars")
  starNumber       Int      @default(0) @map("star_number")
  category         String
  price            Float
  cover            String
  images           String[]
  shortTitle       String   @map("short_title")
  shortDescription String   @map("short_description")
  deliveryTime     Int      @map("delivery_time")
  revision         Int
  features         String[]
  sales            Int?     @default(0)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_ at")
  reviews          Review[]
  Order            Order?

  @@map("gig")
}

model Review {
  id          String   @id @default(uuid())
  gig         Gig      @relation(fields: [gigId], references: [id])
  gigId       String   @unique @map("gig_id")
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @map("user_id")
  star        Star
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_ at")

  @@map("review")
}

enum Star {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

model Order {
  id            String   @id @default(uuid())
  gig           Gig      @relation(fields: [gigId], references: [id])
  gigId         String   @unique @map("gig_id")
  img           String?
  title         String
  price         Float
  seller        User     @relation(name: "seller", fields: [sellerId], references: [id])
  sellerId      String   @unique @map("seller_id")
  buyer         User     @relation(name: "buyer", fields: [buyerId], references: [id])
  buyerId       String   @unique @map("buyer_id")
  isCompleted   Boolean? @default(false) @map("is_completed")
  paymentIntent String   @map("payment_intent")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_ at")

  @@map("order")
}

model Conversation {
  id           String   @id @default(uuid())
  seller       User     @relation(name: "sellerConversation", fields: [sellerId], references: [id])
  sellerId     String   @unique @map("seller_id")
  buyer        User     @relation(name: "buyerConversation", fields: [buyerId], references: [id])
  buyerId      String   @unique @map("buyer_id")
  readBySeller Boolean  @map("read_by_seller")
  readByBuyer  Boolean  @map("read_by_buyer")
  lastMessage  String?  @map("last_message")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_ at")

  @@map("conversation")
}
